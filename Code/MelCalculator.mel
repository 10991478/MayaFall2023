global proc float Multiply(float $nums[]){
    float $product = $nums[0];
    for ($i = 1; $i < size($nums); $i++){
        $product *= $nums[$i];
    }
    return $product;
}

global proc float Divide(float $nums[]){
    float $quotient = $nums[0];
    for ($i = 1; $i < size($nums); $i++){
        $quotient /= $nums[$i];
    }
    return $quotient;
}

global proc float Add(float $nums[]){
    float $sum = 0;
    for ($i = 0; $i < size($nums); $i++){
        $sum += $nums[$i];
    }
    return $sum;
}

global proc float Subtract(float $nums[]){
    float $difference = $nums[0];
    for ($i = 1; $i < size($nums); $i++){
        $difference -= $nums[$i];
    }
    return $difference;
}

/*Power method will calculate using the first number of the array as
    the base and the last number of the array (casted as an int) as the
    power. It can handle negative powers and 0, and will output a number
    to the power of (int)itself if there is only one item in the array.
    I made Power take a float array as its only input so that it would match
    the rest of the functions and therefor makes it muc heasier to implement
    into the Calculator method*/
global proc float Power(float $nums[]){
    float $base = $nums[0];
    if (size($nums) == 1){
        return $base;
    }
    else {
        int $power = 1;
        for ($i = 1; $i < size($nums); $i++){
            $power *= (int)$nums[$i];
        }
        int $tempPower = `abs $power`;
        float $result = 1;
        for ($i = 0; $i < $tempPower; $i++){
            $result *= $base;
        }
        if ($power < 0){
            $result = 1/$result;
        }
        return $result;
    }
}

global proc float Mean(float $nums[]){
    float $mean = 0;
    for ($i = 0; $i < size($nums); $i++){
        $mean += $nums[$i];
    }
    $mean /= size($nums);
    return $mean;
}

global proc float Median(float $nums[]){
    float $orderedArray[] = $nums;
    int $arraySize = size($orderedArray);
    for ($i = 0; $i < $arraySize; $i++){
        int $haveSwapped = 0;
        for($j = 0; $j < $arraySize - 1; $j++){
            if($orderedArray[$j] > $orderedArray[$j+1]){
                float $temp = $orderedArray[$j];
                $orderedArray[$j] = $orderedArray[$j+1];
                $orderedArray[$j+1] = $temp;
                $haveSwapped = 1;
            }
        }
        if($haveSwapped == 0){
            break;  
        }
    }

    float $median = $orderedArray[(int)($arraySize/2)];
    if (`fmod $arraySize 2` == 0){
        $median += $orderedArray[(int)($arraySize/2) - 1];
        $median /= 2;
    }

    return $median;
}

global proc float Calculate(string $operation, float $nums[], int $shouldPrint){
    $operation = `tolower $operation`;
    int $numSize = size($nums);
    string $output = "";
    float $result = 0;
    switch ($operation){
        case "add":
            $output += "The sum of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += " + ";
                }
            }
            $output += " is " + Add($nums) + ".\n";
            break;
        //
        case "subtract":
            $output += "The difference of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += " - ";
                }
            }
            $output += " is " + Subtract($nums) + ".\n";
            break;
        //
        case "multiply":
            $output += "The product of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += " * ";
                }
            }
            $output += " is " + Multiply($nums) + ".\n";
            break;
        //
        case "divide":
            $output += "The quotient of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += " / ";
                }
            }
            $output += " is " + Divide($nums) + ".\n";
            break;
        //
        case "power":
            int $power = 1;
            for ($i = 1; $i < size($nums); $i++){
                $power *= (int)$nums[$i];
            }
            $output += $nums[0] + " to the power of " + ($power) + " is " + Power($nums) + "\n";
            break;
        //
        case "mean":
            $output += "The mean of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += ", ";
                }
            }
            $output += " is " + Mean($nums) + ".\n";
            break;
        //
        case "median":
            $output += "The median of ";
            for ($i = 0; $i < $numSize; $i++){
                $output += $nums[$i];
                if ($i != $numSize - 1){
                    $output += ", ";
                }
            }
            $output += " is " + Median($nums) + ".\n";
            break;
        //
        default:
            $output += $operation + " is not a valid operation. Please check for whitespaces and run the\n";
            $output += "Calculate(string $operation, float $nums[], int $shouldPrint) method with one of the following operations:\n";
            $output += "add\nsubtract\nmultiply\ndivide\npower\nmean\nmedian\n";
            $output += "(upper/lowercase of letters does not matter)";
            break;
    }
    if ($shouldPrint != 0){
        print($output);
    }
    return $result;
}

/*
//testing the individual methods
print("Median: " + Median({1,2,3,4,5,6}) + "\n");
print("Multiply: " + Multiply({1,2,3,4,5}) + "\n");
print("Divide: " + Divide({8,4,2}) + "\n");
print("Add: " + Add({1,2,3,4}) + "\n");
print("Subtract: " + Subtract({10,6,4,2}) + "\n");
print("Power: " + Power({2,-3}) + "\n");
print("Mean: " + Mean({1,2,3,6}) + "\n\n\n");

//running the calculate method with the same values used above
Calculate("mEdiaN", {1,2,3,4,5,6}, 1);
Calculate("MULTIPLY", {1,2,3,4,5}, 1);
Calculate("divide", {8,4,2}, 1);
Calculate("add", {1,2,3,4}, 1);
Calculate("subtract", {10,6,4,2}, 1);
Calculate("power", {2,-3}, 1);
Calculate("mean", {1,2,3,6}, 1);
Calculate("bogus", {0}, 1);
*/


proc CalculatorUI(){
    string $mainWindow = "calculatorWindow";
    if (`window -exists $mainWindow`){
        deleteUI $mainWindow;
    }

    window -title "Calculator" -sizeable 1 -height 300 -width 400 $mainWindow;
        string $mainColumn = `columnLayout -parent $mainWindow`;
            string $radioRow = `rowLayout -numberOfColumns 2 -parent $mainColumn`;
                string $operationRadios = `radioCollection`;
                string $leftColumn = `columnLayout -parent $radioRow`;
                    optionVar -stringValue "addRBT" `radioButton -label "Add" -collection $operationRadios -parent $leftColumn`;
                    optionVar -stringValue "subRBT" `radioButton -label "Subtract" -collection $operationRadios -parent $leftColumn`;
                    optionVar -stringValue "multRBT" `radioButton -label "Multiply" -collection $operationRadios -parent $leftColumn`;
                    optionVar -stringValue "divRBT" `radioButton -label "Divide" -collection $operationRadios -parent $leftColumn`;
                string $rightColumn = `columnLayout -parent $radioRow`;
                    optionVar -stringValue "powRBT" `radioButton -label "Power" -collection $operationRadios -parent $rightColumn`;
                    optionVar -stringValue "meanRBT" `radioButton -label "Mean" -collection $operationRadios -parent $rightColumn`;
                    optionVar -stringValue "medRBT" `radioButton -label "Median" -collection $operationRadios -parent $rightColumn`;
            string $finalColumn = `columnLayout -parent $mainColumn`;
                string $bnRow = `rowLayout -numberOfColumns 2 -parent $finalColumn`;
                    text -label "  Base Number:  " -parent $bnRow;
                    optionVar -stringValue "baseNum" `floatField -parent $bnRow`;
                string $onRow = `rowLayout -numberOfColumns 3 -parent $finalColumn`;
                    text -label "  Operating Numbers:  " -parent $onRow;
                    optionVar -stringValue "opNums" `floatField -parent $onRow`;
                    string $addNumButton = `button -label "Add Number to Operation" -parent $onRow`;
                optionVar -stringValue "resultTXT" `text -label "BASE [operation] OPNUM0 [operation] OPNUM1 = RESULT" -parent $finalColumn`;
    
    showWindow $mainWindow;
}

CalculatorUI();